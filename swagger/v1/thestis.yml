openapi: 3.0.3
info:
  title: Thestis API
  description: Thestis is a service for auto tests with a declarative description of tests
  version: 0.0.1
servers:
  - url: "https://{hostname}/v1"

paths:
  /test-campaigns:
    post:
      tags:
        - test-campaign
      operationId: createTestCampaign
      summary: Creates test campaign for testing services logic using BDD specification style.
      requestBody:
        description: Test campaign data to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTestCampaignRequest"
      responses:
        201:
          description: Test campaign is created.
          headers:
            Location:
              description: Created test campaign URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - test-campaign
      operationId: getTestCampaigns
      summary: Returns test campaigns.
      responses:
        200:
          description: Found previously created test campaigns.
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TestCampaignResponse"

  /test-campaigns/{testCampaignId}:
    get:
      tags:
        - test-campaign
      operationId: getTestCampaign
      summary: Returns test campaign with such ID.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to return.
      responses:
        200:
          description: Found previously created test campaign.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestCampaignResponse"
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - test-campaign
      operationId: removeTestCampaign
      summary: Removes test campaign with such ID.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to remove.
      responses:
        204:
          description: Test campaign successfully removed.
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /test-campaigns/{testCampaignId}/specification:
    post:
      tags:
        - specification
      operationId: loadSpecification
      summary: Loads specification to test campaign.
      description: >
        Makes loaded specification as active in test campaign.
        If there was already a specification in test campaign
        replace it with a new one.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to load specification as active.
      requestBody:
        description: Declarative specification source.
        content:
          application/x-yaml:
            schema:
              $ref: "#/components/schemas/SpecificationSource"
      responses:
        201:
          description: Specification is loaded.
          headers:
            Location:
              description: Created specification URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Invalid specification source file.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: User cant see test campaign with such ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /specifications/{specificationId}:
    get:
      tags:
        - specification
      operationId: getSpecification
      summary: Returns specification with such ID.
      parameters:
        - in: path
          name: specificationId
          schema:
            type: string
            format: uuid
          required: true
          description: Specification ID to return.
      responses:
        200:
          description: Found previously created specification.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecificationResponse"
        404:
          description: Specification with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /test-campaigns/{testCampaignId}/performance:
    post:
      tags:
        - performance
      operationId: startPerformance
      summary: Asynchronously starts performing of test campaign active specification performance.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to start performance.
      requestBody:
        description: >
          Scenario slugs of performance to start.
          Only the passed scenarios will be performed.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartPerformanceRequest"
      responses:
        202:
          description: Performance of active test campaign active specification is created.
          headers:
            Location:
              description: Performance URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: User cannot see test campaign and start performance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /test-campaigns/{testCampaignId}/performances:
    get:
      tags:
        - performance
      operationId: getPerformanceHistory
      summary: Returns performance history.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to return performances.
      responses:
        200:
          description: Found previously started performances.
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/GeneralPerformanceResponse"
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /performances/{performanceId}:
    get:
      tags:
        - performance
      operationId: getPerformance
      summary: Returns performance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to return performance.
      responses:
        200:
          description: Found previously started performance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecificPerformanceResponse"
        404:
          description: Performance with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - performance
      operationId: restartPerformance
      summary: Restart performance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to restart.
      responses:
        204:
          description: Performance restarted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Performance with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Performance in progress, cannot restart.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /performances/{performanceId}/canceled:
    put:
      tags:
        - performance
      operationId: cancelPerformance
      summary: Cancels performance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to cancel performance.
      responses:
        204:
          description: Performance canceled if it was in process.

        403:
          description: "User cannot see performance to cancel it."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        404:
          description: Performance with such ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        409:
          description: Performance has not started yet, cannot cancel.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - slug
        - details
      properties:
        slug:
          $ref: "#/components/schemas/ErrorSlug"
        details:
          type: string

    ErrorSlug:
      type: string
      enum:
        - test-campaign-not-found
        - specification-not-found
        - performance-not-found
        - invalid-specification-source
        - invalid-json
        - bad-request
        - unexpected-error
        - empty-bearer-token
        - unable-to-verify-jwt
        - unauthorized-user
        - user-cant-see-test-campaign
        - user-cant-see-performance
        - performance-already-started
        - performance-not-started

    CreateTestCampaignRequest:
      type: object
      required:
        - viewName
      properties:
        viewName:
          type: string
        summary:
          type: string

    TestCampaignResponse:
      type: object
      required:
        - id
        - viewName
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        viewName:
          type: string
        summary:
          type: string
        createdAt:
          type: string
          format: date-time
        lastPerformanceId:
          type: string
          format: uuid

    SpecificationSource:
      type: string
      format: binary

    SpecificationResponse:
      type: object
      required:
        - specification
        - sourceUri
      properties:
        sourceUri:
          type: string
        specification:
          $ref: "#/components/schemas/Specification"
      example:
        sourceUri: https://some-file-hosting/example
        specification:
          id: 6b9e2631-ad0c-4db6-88b1-f23d3cea0743
          loadedAt: 2020-11-12T00:00:00
          author: Djerys
          title: horns-and-hooves API test
          description: declarative auto tests for horns-and-hooves API
          stories:
            - slug: sellHornsAndHoovesOnTheMarket
              description: test for selling horns and hooves
              asA: seller
              inOrderTo: make sure that the product is being sold
              wantTo: sell horns and hooves on the test market place
              scenarios:
                - slug: sellExistingHornsAndHooves
                  description: sell horns and hooves when they are in stock
                  theses:
                    - slug: deliverHorns
                      given: horns delivered to the warehouse
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/horns
                          contentType: application/json
                          body:
                            producer: Horns Inc.
                            deliveryNumber: 123456
                            code: HRN-3134141
                            batchSize: 103
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: deliverHooves
                      given: hooves delivered to the warehouse
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/horns
                          contentType: application/json
                          body:
                            producer: Hooves Inc.
                            deliveryNumber: 654321
                            code: HVS-3123313
                            batchSize: 313
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: sellHornsAndHooves
                      when: selling horns and hooves
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/sold
                          contentType: application/json
                          body:
                            products:
                              - code: HRN-3134141
                                itemsCount: 103
                                itemPrice: 1000
                              - code: HVS-3123313
                                itemsCount: 20
                                itemPrice: 1003
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: getSoldProducts
                      then: get sold products
                      http:
                        request:
                          method: GET
                          url: https://api.warehouse/v1/{{sellHornsAndHooves.response.headers.Content-Location}}
                        response:
                          allowedCodes: [ 200 ]
                          allowedContentType: application/json
                    - slug: checkSoldProducts
                      then: check that products added to sold products
                      after:
                        - getSoldProducts
                      assertion:
                        with: JSONPATH
                        assert:
                          - actual: getSoldProducts.response.body.products..itemsCount
                            expected: [ 103, 21 ]

    StartPerformanceRequest:
      type: object
      properties:
        scenarioSlugs:
          items:
            $ref: "#/components/schemas/SpecificationSlug"
      example:
        scenarioSlugs:
          - story: a
            scenario: b
          - story: a
            scenario: c
          - story: f
            scenario: a

    Specification:
      type: object
      required:
        - id
        - testCampaignId
        - stories
        - loadedAt
      properties:
        id:
          type: string
          format: uuid
        testCampaignId:
          type: string
          format: uuid
        loadedAt:
          type: string
          format: date-time
        author:
          type: string
        title:
          type: string
        description:
          type: string
        stories:
          type: array
          items:
            $ref: "#/components/schemas/Story"

    Story:
      type: object
      required:
        - slug
        - scenarios
      properties:
        slug:
          type: string
        description:
          type: string
        asA:
          type: string
        inOrderTo:
          type: string
        wantTo:
          type: string
        scenarios:
          type: array
          items:
            $ref: "#/components/schemas/Scenario"

    Scenario:
      type: object
      required:
        - slug
        - theses
      properties:
        slug:
          type: string
        description:
          type: string
        theses:
          type: array
          items:
            $ref: "#/components/schemas/Thesis"

    Thesis:
      type: object
      required:
        - slug
        - after
        - statement
      properties:
        slug:
          type: string
        statement:
          $ref: "#/components/schemas/Statement"
        after:
          type: array
          items:
            type: string
        http:
          $ref: "#/components/schemas/Http"
        assertion:
          $ref: "#/components/schemas/Assertion"

    Statement:
      type: object
      required:
        - stage
        - behavior
      properties:
        stage:
          type: string
        behavior:
          type: string

    Http:
      type: object
      properties:
        request:
          $ref: "#/components/schemas/HttpRequest"
        response:
          $ref: "#/components/schemas/HttpResponse"

    HttpRequest:
      type: object
      required:
        - method
        - url
      properties:
        method:
          $ref: "#/components/schemas/HttpMethod"
        url:
          type: string
        contentType:
          type: string
        body:
          type: object

    HttpResponse:
      type: object
      required:
        - allowedCodes
      properties:
        allowedCodes:
          type: array
          items:
            type: integer
        allowedContentType:
          type: string

    HttpMethod:
      type: string
      enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - OPTIONS
        - TRACE
        - CONNECT
        - HEAD

    Assertion:
      type: object
      required:
        - with
        - assert
      properties:
        with:
          $ref: "#/components/schemas/AssertionMethod"
        assert:
          type: array
          items:
            $ref: "#/components/schemas/Assert"

    AssertionMethod:
      type: string
      enum:
        - JSONPATH

    Assert:
      type: object
      required:
        - actual
        - expected
      properties:
        actual:
          type: string
        expected:
          type: string

    GeneralPerformanceResponse:
      type: object
      required:
        - id
        - specificationId
        - startedAt
        - lastState
      properties:
        id:
          type: string
          format: uuid
        specificationId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: date-time
        lastState:
          $ref: "#/components/schemas/PerformanceState"
      example:
        specificationId: 43dc4b25-1be1-49eb-a58b-77bfed79cd4c
        startedAt: 2021-11-12T00:00:00
        lastState: CRASHED

    SpecificPerformanceResponse:
      type: object
      required:
        - id
        - specificationId
        - startedAt
        - flows
      properties:
        id:
          type: string
          format: uuid
        specificationId:
          type: string
          format: uuid
        flows:
          items:
            $ref: "#/components/schemas/Flow"
      example:
        specificationId: 9fccd444-c0b2-11ec-9d64-0242ac120002
        startedAt: 2021-11-12T00:00:00
        flows:
          - overallState: PASSED
            statuses:
              - slug:
                  story: foo
                  scenario: bar
                state: PASSED
                thesisStatuses:
                  - thesisSlug: ban
                    state: PASSED
                  - thesisSlug: baz
                    state: PASSED
          - overallState: FAILED
            statuses:
              - slug:
                  story: foo
                  scenario: bar
                state: FAILED
                thesisStatuses:
                  - thesisSlug: ban
                    state: PASSED
                  - thesisSlug: baz
                    state: FAILED
                    occurredErrors:
                      - something wrong
                      - something else wrong

    Flow:
      type: object
      required:
        - overallState
        - statuses
      properties:
        overallState:
          $ref: "#/components/schemas/PerformanceState"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/Status"

    Status:
      type: object
      required:
        - slug
        - state
        - thesisStatuses
      properties:
        slug:
          $ref: "#/components/schemas/SpecificationSlug"
        state:
          $ref: "#/components/schemas/PerformanceState"
        thesisStatuses:
          items:
            $ref: "#/components/schemas/ThesisStatus"

    ThesisStatus:
      type: object
      required:
        - thesisSlug
        - state
        - occurredErrors
      properties:
        thesisSlug:
          type: string
        state:
          $ref: "#/components/schemas/PerformanceState"
        occurredErrors:
          items:
            type: string

    SpecificationSlug:
      type: object
      properties:
        story:
          type: string
        scenario:
          type: string
        thesis:
          type: string

    PerformanceState:
      type: string
      enum:
        - NO_STATE
        - QUEUED
        - NOT_PERFORMED
        - PERFORMING
        - PASSED
        - FAILED
        - CRASHED
        - CANCELED
