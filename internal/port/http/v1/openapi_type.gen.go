// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v1

// Defines values for AssertionMethod.
const (
	AssertionMethodJSONPATH AssertionMethod = "JSONPATH"
)

// Defines values for ErrorSlug.
const (
	ErrorSlugBadRequest ErrorSlug = "bad-request"

	ErrorSlugInvalidJson ErrorSlug = "invalid-json"

	ErrorSlugInvalidSpecificationSource ErrorSlug = "invalid-specification-source"

	ErrorSlugPerformanceNotFound ErrorSlug = "performance-not-found"

	ErrorSlugSpecificationNotFound ErrorSlug = "specification-not-found"

	ErrorSlugTestCampaignNotFound ErrorSlug = "test-campaign-not-found"

	ErrorSlugUnexpectedError ErrorSlug = "unexpected-error"
)

// Defines values for HttpMethod.
const (
	HttpMethodCONNECT HttpMethod = "CONNECT"

	HttpMethodDELETE HttpMethod = "DELETE"

	HttpMethodGET HttpMethod = "GET"

	HttpMethodHEAD HttpMethod = "HEAD"

	HttpMethodOPTIONS HttpMethod = "OPTIONS"

	HttpMethodPATCH HttpMethod = "PATCH"

	HttpMethodPOST HttpMethod = "POST"

	HttpMethodPUT HttpMethod = "PUT"

	HttpMethodTRACE HttpMethod = "TRACE"
)

// Defines values for PerformanceState.
const (
	PerformanceStateNOTPERFORMED PerformanceState = "NOT_PERFORMED"

	PerformanceStatePERFORMING PerformanceState = "PERFORMING"

	PerformanceStatePERFORMINGERROR PerformanceState = "PERFORMING_ERROR"

	PerformanceStatePERFORMINGFAILED PerformanceState = "PERFORMING_FAILED"

	PerformanceStatePERFORMINGPASSED PerformanceState = "PERFORMING_PASSED"
)

// Assertion defines model for Assertion.
type Assertion struct {
	Actual   string `json:"actual"`
	Expected string `json:"expected"`
}

// AssertionAction defines model for AssertionAction.
type AssertionAction struct {
	Assert *[]Assertion     `json:"assert,omitempty"`
	With   *AssertionMethod `json:"with,omitempty"`
}

// AssertionMethod defines model for AssertionMethod.
type AssertionMethod string

// CreateTestCampaignRequest defines model for CreateTestCampaignRequest.
type CreateTestCampaignRequest struct {
	Summary  *string `json:"summary,omitempty"`
	ViewName string  `json:"viewName"`
}

// Error defines model for Error.
type Error struct {
	Details string    `json:"details"`
	Slug    ErrorSlug `json:"slug"`
}

// ErrorSlug defines model for ErrorSlug.
type ErrorSlug string

// HttpAction defines model for HttpAction.
type HttpAction struct {
	Request *struct {
		Body        *map[string]interface{} `json:"body,omitempty"`
		ContentType *string                 `json:"contentType,omitempty"`
		Method      HttpMethod              `json:"method"`
		Url         string                  `json:"url"`
	} `json:"request,omitempty"`
	Response *struct {
		AllowedCodes       []int   `json:"allowedCodes"`
		AllowedContentType *string `json:"allowedContentType,omitempty"`
	} `json:"response,omitempty"`
}

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// PerformanceResponse defines model for PerformanceResponse.
type PerformanceResponse struct {
	State              *PerformanceState   `json:"state,omitempty"`
	StoriesPerformance *[]StoryPerformance `json:"storiesPerformance,omitempty"`
}

// PerformanceState defines model for PerformanceState.
type PerformanceState string

// Scenario defines model for Scenario.
type Scenario struct {
	Description *string   `json:"description,omitempty"`
	Slug        string    `json:"slug"`
	Theses      *[]Thesis `json:"theses,omitempty"`
}

// ScenarioPerformance defines model for ScenarioPerformance.
type ScenarioPerformance struct {
	Slug              string               `json:"slug"`
	State             PerformanceState     `json:"state"`
	ThesesPerformance *[]ThesisPerformance `json:"thesesPerformance,omitempty"`
}

// Specification defines model for Specification.
type Specification struct {
	Author      *string  `json:"author,omitempty"`
	Description *string  `json:"description,omitempty"`
	Stories     *[]Story `json:"stories,omitempty"`
	Title       *string  `json:"title,omitempty"`
}

// SpecificationResponse defines model for SpecificationResponse.
type SpecificationResponse struct {
	Specification          *Specification `json:"specification,omitempty"`
	SpecificationSourceUri *string        `json:"specificationSourceUri,omitempty"`
}

// SpecificationSource defines model for SpecificationSource.
type SpecificationSource string

// StartPerformanceRequest defines model for StartPerformanceRequest.
type StartPerformanceRequest struct {
	Stories *[]struct {
		Scenarios *[]struct {
			Slug string `json:"slug"`
		} `json:"scenarios,omitempty"`
		Slug string `json:"slug"`
	} `json:"stories,omitempty"`
}

// Story defines model for Story.
type Story struct {
	AsA         *string     `json:"asA,omitempty"`
	Description *string     `json:"description,omitempty"`
	InOrderTo   *string     `json:"inOrderTo,omitempty"`
	Scenarios   *[]Scenario `json:"scenarios,omitempty"`
	Slug        string      `json:"slug"`
	WantTo      *string     `json:"wantTo,omitempty"`
}

// StoryPerformance defines model for StoryPerformance.
type StoryPerformance struct {
	ScenariosPerformance *[]ScenarioPerformance `json:"scenariosPerformance,omitempty"`
	Slug                 string                 `json:"slug"`
	State                PerformanceState       `json:"state"`
}

// TestCampaignResponse defines model for TestCampaignResponse.
type TestCampaignResponse struct {
	ActiveSpecificationId *string `json:"activeSpecificationId,omitempty"`
	Id                    string  `json:"id"`
	LastPerformanceId     *string `json:"lastPerformanceId,omitempty"`
	Summary               *string `json:"summary,omitempty"`
	ViewName              string  `json:"viewName"`
}

// Thesis defines model for Thesis.
type Thesis struct {
	After     *[]string        `json:"after,omitempty"`
	Assertion *AssertionAction `json:"assertion,omitempty"`
	Given     *string          `json:"given,omitempty"`
	Http      *HttpAction      `json:"http,omitempty"`
	Slug      string           `json:"slug"`
	Then      *string          `json:"then,omitempty"`
	When      *string          `json:"when,omitempty"`
}

// ThesisPerformance defines model for ThesisPerformance.
type ThesisPerformance struct {
	ErrorDetails *string          `json:"errorDetails,omitempty"`
	FailDetails  *string          `json:"failDetails,omitempty"`
	Slug         string           `json:"slug"`
	State        PerformanceState `json:"state"`
}

// RestartPerformanceJSONBody defines parameters for RestartPerformance.
type RestartPerformanceJSONBody StartPerformanceRequest

// CreateTestCampaignJSONBody defines parameters for CreateTestCampaign.
type CreateTestCampaignJSONBody CreateTestCampaignRequest

// PerformActiveSpecificationJSONBody defines parameters for PerformActiveSpecification.
type PerformActiveSpecificationJSONBody StartPerformanceRequest

// RestartPerformanceJSONRequestBody defines body for RestartPerformance for application/json ContentType.
type RestartPerformanceJSONRequestBody RestartPerformanceJSONBody

// CreateTestCampaignJSONRequestBody defines body for CreateTestCampaign for application/json ContentType.
type CreateTestCampaignJSONRequestBody CreateTestCampaignJSONBody

// PerformActiveSpecificationJSONRequestBody defines body for PerformActiveSpecification for application/json ContentType.
type PerformActiveSpecificationJSONRequestBody PerformActiveSpecificationJSONBody
