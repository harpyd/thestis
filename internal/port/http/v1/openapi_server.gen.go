// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns peformance with such ID.
	// (GET /performances/{performanceId})
	GetPerformance(w http.ResponseWriter, r *http.Request, performanceId string)
	// Restart performance with such ID.
	// (PUT /performances/{performanceId})
	RestartPerformance(w http.ResponseWriter, r *http.Request, performanceId string)
	// Cancels performance with such ID.
	// (PUT /performances/{performanceId}/canceled)
	CancelPerformance(w http.ResponseWriter, r *http.Request, performanceId string)
	// Returns specification with such ID.
	// (GET /specifications/{specificationId})
	GetSpecification(w http.ResponseWriter, r *http.Request, specificationId string)
	// Returns test campaigns.
	// (GET /test-campaigns)
	GetTestCampaigns(w http.ResponseWriter, r *http.Request)
	// Creates test campaign for testing services logic using BDD specification style.
	// (POST /test-campaigns)
	CreateTestCampaign(w http.ResponseWriter, r *http.Request)
	// Removes test campaign with such ID.
	// (DELETE /test-campaigns/{testCampaignId})
	RemoveTestCampaign(w http.ResponseWriter, r *http.Request, testCampaignId string)
	// Returns test campaign with such ID.
	// (GET /test-campaigns/{testCampaignId})
	GetTestCampaign(w http.ResponseWriter, r *http.Request, testCampaignId string)
	// Asynchronously starts performing of test campaign active specification performance.
	// (POST /test-campaigns/{testCampaignId}/performance)
	StartPerformance(w http.ResponseWriter, r *http.Request, testCampaignId string)
	// Returns performances history.
	// (GET /test-campaigns/{testCampaignId}/performances)
	GetPerformancesHistory(w http.ResponseWriter, r *http.Request, testCampaignId string)
	// Loads specification to test campaign.
	// (POST /test-campaigns/{testCampaignId}/specification)
	LoadSpecification(w http.ResponseWriter, r *http.Request, testCampaignId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetPerformance operation middleware
func (siw *ServerInterfaceWrapper) GetPerformance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "performanceId" -------------
	var performanceId string

	err = runtime.BindStyledParameter("simple", false, "performanceId", chi.URLParam(r, "performanceId"), &performanceId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter performanceId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPerformance(w, r, performanceId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RestartPerformance operation middleware
func (siw *ServerInterfaceWrapper) RestartPerformance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "performanceId" -------------
	var performanceId string

	err = runtime.BindStyledParameter("simple", false, "performanceId", chi.URLParam(r, "performanceId"), &performanceId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter performanceId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RestartPerformance(w, r, performanceId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CancelPerformance operation middleware
func (siw *ServerInterfaceWrapper) CancelPerformance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "performanceId" -------------
	var performanceId string

	err = runtime.BindStyledParameter("simple", false, "performanceId", chi.URLParam(r, "performanceId"), &performanceId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter performanceId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelPerformance(w, r, performanceId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSpecification operation middleware
func (siw *ServerInterfaceWrapper) GetSpecification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "specificationId" -------------
	var specificationId string

	err = runtime.BindStyledParameter("simple", false, "specificationId", chi.URLParam(r, "specificationId"), &specificationId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter specificationId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpecification(w, r, specificationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTestCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetTestCampaigns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTestCampaigns(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTestCampaign operation middleware
func (siw *ServerInterfaceWrapper) CreateTestCampaign(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTestCampaign(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveTestCampaign operation middleware
func (siw *ServerInterfaceWrapper) RemoveTestCampaign(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testCampaignId" -------------
	var testCampaignId string

	err = runtime.BindStyledParameter("simple", false, "testCampaignId", chi.URLParam(r, "testCampaignId"), &testCampaignId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter testCampaignId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveTestCampaign(w, r, testCampaignId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTestCampaign operation middleware
func (siw *ServerInterfaceWrapper) GetTestCampaign(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testCampaignId" -------------
	var testCampaignId string

	err = runtime.BindStyledParameter("simple", false, "testCampaignId", chi.URLParam(r, "testCampaignId"), &testCampaignId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter testCampaignId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTestCampaign(w, r, testCampaignId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// StartPerformance operation middleware
func (siw *ServerInterfaceWrapper) StartPerformance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testCampaignId" -------------
	var testCampaignId string

	err = runtime.BindStyledParameter("simple", false, "testCampaignId", chi.URLParam(r, "testCampaignId"), &testCampaignId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter testCampaignId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartPerformance(w, r, testCampaignId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPerformancesHistory operation middleware
func (siw *ServerInterfaceWrapper) GetPerformancesHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testCampaignId" -------------
	var testCampaignId string

	err = runtime.BindStyledParameter("simple", false, "testCampaignId", chi.URLParam(r, "testCampaignId"), &testCampaignId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter testCampaignId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPerformancesHistory(w, r, testCampaignId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoadSpecification operation middleware
func (siw *ServerInterfaceWrapper) LoadSpecification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testCampaignId" -------------
	var testCampaignId string

	err = runtime.BindStyledParameter("simple", false, "testCampaignId", chi.URLParam(r, "testCampaignId"), &testCampaignId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter testCampaignId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoadSpecification(w, r, testCampaignId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/performances/{performanceId}", wrapper.GetPerformance)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/performances/{performanceId}", wrapper.RestartPerformance)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/performances/{performanceId}/canceled", wrapper.CancelPerformance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/specifications/{specificationId}", wrapper.GetSpecification)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-campaigns", wrapper.GetTestCampaigns)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/test-campaigns", wrapper.CreateTestCampaign)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/test-campaigns/{testCampaignId}", wrapper.RemoveTestCampaign)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-campaigns/{testCampaignId}", wrapper.GetTestCampaign)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/test-campaigns/{testCampaignId}/performance", wrapper.StartPerformance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-campaigns/{testCampaignId}/performances", wrapper.GetPerformancesHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/test-campaigns/{testCampaignId}/specification", wrapper.LoadSpecification)
	})

	return r
}
