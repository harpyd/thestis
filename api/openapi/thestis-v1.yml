openapi: 3.0.3
info:
  title: Thestis API
  description: Thestis is a service for auto tests with a declarative description of tests
  version: 0.0.1
servers:
  - url: 'https://{hostname}/v1'

paths:
  /test-campaigns:
    post:
      tags:
        - test-campaign
      operationId: createTestCampaign
      summary: Creates test campaign for testing services logic using BDD specification style.
      requestBody:
        description: Test campaign data to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestCampaignRequest'
      responses:
        201:
          description: Test campaign is created.
          headers:
            Location:
              description: Created test campaign URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - test-campaign
      operationId: getTestCampaigns
      summary: Returns test campaigns.
      responses:
        200:
          description: Found previously created test campaigns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCampaignResponse'

  /test-campaigns/{testCampaignId}:
    get:
      tags:
        - test-campaign
      operationId: getTestCampaign
      summary: Returns test campaign with such ID.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to return.
      responses:
        200:
          description: Found previously created test campaigns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCampaignResponse'
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - test-campaign
      operationId: removeTestCampaign
      summary: Removes test campaign with such ID.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to remove.
      responses:
        204:
          description: Test campaign successfully removed.
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-campaigns/{testCampaignId}/specification:
    post:
      tags:
        - specification
      operationId: loadSpecification
      summary: Loads specification to test campaign.
      description: >
        Makes loaded specification as active in test campaign.
        If there was already a specification in test campaign
        replace it with a new one.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to load specification as active.
      requestBody:
        description: Declarative specification source.
        content:
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/SpecificationSource'
      responses:
        201:
          description: Specification is loaded.
          headers:
            Location:
              description: Created specification URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: Invalid specification source file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: User cant see test campaign with such ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /specifications/{specificationId}:
    get:
      tags:
        - specification
      operationId: getSpecification
      summary: Returns specification with such ID.
      parameters:
        - in: path
          name: specificationId
          schema:
            type: string
            format: uuid
          required: true
          description: Specification ID to return.
      responses:
        200:
          description: Found previously created specification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecificationResponse'
        404:
          description: Specification with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-campaigns/{testCampaignId}/performance:
    post:
      tags:
        - performance
      operationId: performActiveSpecification
      summary: Starts performance of test campaign active specification.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to start performance.
      requestBody:
        description: >
          Stories and scenarios to perform.
          If there are no stories, then all stories of specification will be performed.
          If there are no scenarios in story, then all scenarios of story will be performed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartPerformanceRequest'
      responses:
        201:
          description: Performance of active test campaign active specification is created.
          headers:
            Location:
              description: Performance URI.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-campaigns/{testCampaignId}/performances:
    get:
      tags:
        - performance
      operationId: getPerformancesHistory
      summary: Returns performances history.
      parameters:
        - in: path
          name: testCampaignId
          schema:
            type: string
            format: uuid
          required: true
          description: Test campaign ID to return performances.
      responses:
        200:
          description: Found previously started performances.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PerformanceResponse'
        404:
          description: Test campaign with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /performances/{performanceId}:
    get:
      tags:
        - performance
      operationId: getPerformance
      summary: Returns peformance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to return performance.
      responses:
        200:
          description: Found previously started performance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceResponse'
        404:
          description: Performance with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - performance
      operationId: restartPerformance
      summary: Restart performance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to restart.
      requestBody:
        description: >
          Stories and scenarios to perform.
          If there are no stories, then all stories of specification will be performed.
          If there are no scenarios in story, then all scenarios of story will be performed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartPerformanceRequest'
      responses:
        204:
          description: Performance restarted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Performance with such ID not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        423:
          description: Performance in progress, cannot restart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /performances/{performanceId}/canceled:
    put:
      tags:
        - performance
      operationId: cancelPerformance
      summary: Cancels performance with such ID.
      parameters:
        - in: path
          name: performanceId
          schema:
            type: string
            format: uuid
          required: true
          description: Performance ID to cancel performance.
      responses:
        204:
          description: >
            Performance canceled if it was in process.
            If it was not executed, nothing happened.
        404:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      required:
        - slug
        - details
      properties:
        slug:
          $ref: '#/components/schemas/ErrorSlug'
        details:
          type: string

    ErrorSlug:
      type: string
      enum:
        - test-campaign-not-found
        - specification-not-found
        - performance-not-found
        - invalid-specification-source
        - invalid-json
        - bad-request
        - unexpected-error
        - empty-bearer-token
        - unable-to-verify-jwt
        - unauthorized-user
        - user-cant-see-test-campaign

    CreateTestCampaignRequest:
      type: object
      required:
        - viewName
      properties:
        viewName:
          type: string
        summary:
          type: string

    TestCampaignResponse:
      type: object
      required:
        - id
        - viewName
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        viewName:
          type: string
        summary:
          type: string
        activeSpecificationId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        lastPerformanceId:
          type: string
          format: uuid

    SpecificationSource:
      type: string
      format: binary

    SpecificationResponse:
      type: object
      required:
        - specification
        - sourceUri
      properties:
        sourceUri:
          type: string
        specification:
          $ref: '#/components/schemas/Specification'
      example:
        sourceUri: https://some-file-hosting/example
        specification:
          id: 6b9e2631-ad0c-4db6-88b1-f23d3cea0743
          loadedAt: 2020-11-12T00:00:00
          author: Djerys
          title: horns-and-hooves API test
          description: declarative auto tests for horns-and-hooves API
          stories:
            - slug: sellHornsAndHoovesOnTheMarket
              description: test for selling horns and hooves
              asA: seller
              inOrderTo: make sure that the product is being sold
              wantTo: sell horns and hooves on the test market place
              scenarios:
                - slug: sellExistingHornsAndHooves
                  description: sell horns and hooves when they are in stock
                  theses:
                    - slug: deliverHorns
                      given: horns delivered to the warehouse
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/horns
                          contentType: application/json
                          body:
                            producer: Horns Inc.
                            deliveryNumber: 123456
                            code: HRN-3134141
                            batchSize: 103
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: deliverHooves
                      given: hooves delivered to the warehouse
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/horns
                          contentType: application/json
                          body:
                            producer: Hooves Inc.
                            deliveryNumber: 654321
                            code: HVS-3123313
                            batchSize: 313
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: sellHornsAndHooves
                      when: selling horns and hooves
                      http:
                        request:
                          method: POST
                          url: https://api.warehouse/v1/sold
                          contentType: application/json
                          body:
                            products:
                              - code: HRN-3134141
                                itemsCount: 103
                                itemPrice: 1000
                              - code: HVS-3123313
                                itemsCount: 20
                                itemPrice: 1003
                        response:
                          allowedCodes: [ 201 ]
                          allowedContentType: application/json
                    - slug: getSoldProducts
                      then: get sold products
                      http:
                        request:
                          method: GET
                          url: https://api.warehouse/v1/{{sellHornsAndHooves.response.headers.Content-Location}}
                        response:
                          allowedCodes: [ 200 ]
                          allowedContentType: application/json
                    - slug: checkSoldProducts
                      then: check that products added to sold products
                      after:
                        - getSoldProducts
                      assertion:
                        with: JSONPATH
                        assert:
                          - actual: getSoldProducts.response.body.products..itemsCount
                            expected: [ 103, 21 ]

    StartPerformanceRequest:
      type: object
      properties:
        stories:
          type: array
          items:
            type: object
            required:
              - slug
            properties:
              slug:
                type: string
              scenarios:
                type: array
                items:
                  type: object
                  required:
                    - slug
                  properties:
                    slug:
                      type: string

    Specification:
      type: object
      required:
        - id
        - testCampaignId
        - stories
        - loadedAt
      properties:
        id:
          type: string
          format: uuid
        testCampaignId:
          type: string
          format: uuid
        loadedAt:
          type: string
          format: date-time
        author:
          type: string
        title:
          type: string
        description:
          type: string
        stories:
          type: array
          items:
            $ref: '#/components/schemas/Story'

    Story:
      type: object
      required:
        - slug
        - scenarios
      properties:
        slug:
          type: string
        description:
          type: string
        asA:
          type: string
        inOrderTo:
          type: string
        wantTo:
          type: string
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/Scenario'

    Scenario:
      type: object
      required:
        - slug
        - theses
      properties:
        slug:
          type: string
        description:
          type: string
        theses:
          type: array
          items:
            $ref: '#/components/schemas/Thesis'

    Thesis:
      type: object
      required:
        - slug
        - after
        - statement
      properties:
        slug:
          type: string
        statement:
          $ref: '#/components/schemas/Statement'
        after:
          type: array
          items:
            type: string
        http:
          $ref: '#/components/schemas/Http'
        assertion:
          $ref: '#/components/schemas/Assertion'

    Statement:
      type: object
      required:
        - keyword
        - behavior
      properties:
        keyword:
          type: string
        behavior:
          type: string

    Http:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/HttpRequest'
        response:
          $ref: '#/components/schemas/HttpResponse'

    HttpRequest:
      type: object
      required:
        - method
        - url
      properties:
        method:
          $ref: '#/components/schemas/HttpMethod'
        url:
          type: string
        contentType:
          type: string
        body:
          type: object

    HttpResponse:
      type: object
      required:
        - allowedCodes
      properties:
        allowedCodes:
          type: array
          items:
            type: integer
        allowedContentType:
          type: string

    HttpMethod:
      type: string
      enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - OPTIONS
        - TRACE
        - CONNECT
        - HEAD

    Assertion:
      type: object
      required:
        - with
        - assert
      properties:
        with:
          $ref: '#/components/schemas/AssertionMethod'
        assert:
          type: array
          items:
            $ref: '#/components/schemas/Assert'

    AssertionMethod:
      type: string
      enum:
        - JSONPATH

    Assert:
      type: object
      required:
        - actual
        - expected
      properties:
        actual:
          type: string
        expected:
          type: string

    PerformanceResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/PerformanceState'
        storiesPerformance:
          type: array
          items:
            $ref: '#/components/schemas/StoryPerformance'
      example:
        state: PERFORMING_FAILED
        storiesPerformance:
          - slug: sellHornsAndHooves
            state: PERFORMING_FAILED
            scenariosPerformance:
              - slug: sellExistingHornsAndHooves
                state: PERFORMING_FAILED
                thesesPerformance:
                  - slug: deliverHorns
                    state: PERFORMING_PASSED
                  - slug: deliverHooves
                    state: PERFORMING_PASSED
                  - slug: sellHornsAndHooves
                    state: PERFORMING_PASSED
                  - slug: getSoldProducts
                    state: PERFORMING_PASSED
                  - slug: checkSoldProducts
                    state: PERFORMING_FAILED
                    failDetails: expected=[103, 21] is not equal to actual=[103, 20]

    StoryPerformance:
      type: object
      required:
        - slug
        - state
      properties:
        slug:
          type: string
        state:
          $ref: '#/components/schemas/PerformanceState'
        scenariosPerformance:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioPerformance'

    ScenarioPerformance:
      type: object
      required:
        - slug
        - state
      properties:
        slug:
          type: string
        state:
          $ref: '#/components/schemas/PerformanceState'
        thesesPerformance:
          type: array
          items:
            $ref: '#/components/schemas/ThesisPerformance'

    ThesisPerformance:
      type: object
      required:
        - slug
        - state
      properties:
        slug:
          type: string
        state:
          $ref: '#/components/schemas/PerformanceState'
        errorDetails:
          type: string
        failDetails:
          type: string

    PerformanceState:
      type: string
      enum:
        - NOT_PERFORMED
        - PERFORMING
        - PERFORMING_ERROR
        - PERFORMING_PASSED
        - PERFORMING_FAILED