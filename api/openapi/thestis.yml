openapi: 3.0.3
info:
  title: Thestis API
  description: Thestis is a service for auto tests with a declarative description of tests
  version: 0.0.1
servers:
  - url: 'https://{hostname}/v1'

paths:
  /scenario:
    post:
      tags:
        - scenario
        - metadata
      operationId: loadScenarioMetadata
      summary: create test scenario metadata
      requestBody:
        description: scenario metadata
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioMetadataRequest'
      responses:
        201:
          description: scenario metadata is created
          headers:
            Content-Location:
              description: created scenario metadata url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scenario/{scenarioID}:
    get:
      tags:
        - scenario
        - metadata
      operationId: getScenarioMetadata
      summary: get test scenario metadata
      parameters:
        - in: path
          name: scenarioID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario metadata id
      responses:
        200:
          description: previously created scenario metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioMetadataResponse'
        404:
          description: scenario metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scenario/{scenarioID}/source:
    post:
      tags:
        - scenario
        - source
      operationId: pushScenarioSource
      summary: push declarative test scenario source
      parameters:
        - in: path
          name: scenarioID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario metadata id
      requestBody:
        description: declarative scenario source
        required: true
        content:
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/ScenarioSource'
      responses:
        201:
          description: scenario source uploaded
          headers:
            Content-Location:
              description: uploaded scenario source url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: scenario metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - scenario
        - source
      operationId: getScenarioSource
      summary: get declarative test scenario source
      parameters:
        - in: path
          name: scenarioID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario metadata id
      responses:
        200:
          description: previously pushed scenario source
          content:
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ScenarioSource'
        404:
          description: scenario metadata or source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scenario/{scenarioID}/performance:
    post:
      tags:
        - scenario
        - performance
      operationId: performScenario
      summary: start test scenario performing
      parameters:
        - in: path
          name: scenarioID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario metadata id
      responses:
        201:
          description: scenario performance url
          headers:
            Content-Location:
              description: created scenario performance url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: scenario metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scenario/{scenarioID}/performance/{performanceID}:
    get:
      tags:
        - scenario
        - performance
      operationId: getScenarioPerformance
      summary: get current state of test scenario performance
      parameters:
        - in: path
          name: scenarioID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario metadata id
        - in: path
          name: performanceID
          schema:
            type: string
            format: uuid
          required: true
          description: scenario performance id
      responses:
        200:
          description: current state of scenario performance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioPerformanceState'
        404:
          description: scenario metadata or performance not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Error:
      type: object
      required:
        - slug
        - details
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        details:
          type: string

    Slug:
      type: string
      enum:
        - metadata-not-found
        - source-not-found
        - performance-not-found
        - invalid-json

    ScenarioMetadataRequest:
      type: object
      properties:
        some:
          type: string

    ScenarioMetadataResponse:
      type: object
      properties:
        some:
          type: string

    ScenarioSource:
      type: string
      format: binary

    ScenarioPerformanceState:
      type: object
      properties:
        some:
          type: string


