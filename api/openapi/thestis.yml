openapi: 3.0.3
info:
  title: Thestis API
  description: Thestis is a service for auto tests with a declarative description of tests
  version: 0.0.1
servers:
  - url: 'https://{hostname}/v1'

paths:
  /specifications:
    post:
      tags:
        - specifications
        - metadata
      operationId: loadSpecificationMetadata
      summary: create test specification metadata
      requestBody:
        description: specification metadata
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecificationMetadataRequest'
      responses:
        201:
          description: specification metadata is created
          headers:
            Content-Location:
              description: created specification metadata url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /specifications/{specificationID}:
    get:
      tags:
        - specifications
        - metadata
      operationId: getSpecificationMetadata
      summary: get test specification metadata
      parameters:
        - in: path
          name: specificationID
          schema:
            type: string
            format: uuid
          required: true
          description: specification metadata id
      responses:
        200:
          description: previously created specification metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecificationMetadataResponse'
        404:
          description: specification metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /specifications/{specificationID}/source:
    post:
      tags:
        - specifications
        - source
      operationId: pushSpecificationSource
      summary: push declarative test specification source
      parameters:
        - in: path
          name: specificationID
          schema:
            type: string
            format: uuid
          required: true
          description: specification metadata id
      requestBody:
        description: declarative specification source
        required: true
        content:
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/SpecificationSource'
      responses:
        201:
          description: specification source uploaded
          headers:
            Content-Location:
              description: uploaded specification source url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: specification metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - specifications
        - source
      operationId: getSpecificationSource
      summary: get declarative test specification source
      parameters:
        - in: path
          name: specificationID
          schema:
            type: string
            format: uuid
          required: true
          description: specification metadata id
      responses:
        200:
          description: previously pushed specification source
          content:
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/SpecificationSource'
        404:
          description: specification metadata or source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /specifications/{specificationID}/performance:
    post:
      tags:
        - specifications
        - performance
      operationId: performSpecification
      summary: start test specification performing
      parameters:
        - in: path
          name: specificationID
          schema:
            type: string
            format: uuid
          required: true
          description: specification metadata id
      responses:
        201:
          description: specification performance url
          headers:
            Content-Location:
              description: created specification performance url
              schema:
                type: string
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: specification metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /specifications/{specificationID}/performance/{performanceID}:
    get:
      tags:
        - specifications
        - performance
      operationId: getSpecificationPerformance
      summary: get current state of test specification performance
      parameters:
        - in: path
          name: specificationID
          schema:
            type: string
            format: uuid
          required: true
          description: specification metadata id
        - in: path
          name: performanceID
          schema:
            type: string
            format: uuid
          required: true
          description: specification performance id
      responses:
        200:
          description: current state of specification performance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecificationPerformanceState'
        404:
          description: specification metadata or performance not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Error:
      type: object
      required:
        - slug
        - details
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        details:
          type: string

    Slug:
      type: string
      enum:
        - metadata-not-found
        - source-not-found
        - performance-not-found
        - invalid-json

    SpecificationMetadataRequest:
      type: object
      properties:
        title:
          type: string

    SpecificationMetadataResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string

    SpecificationSource:
      type: string
      format: binary

    SpecificationPerformanceState:
      type: object
      properties:
        some:
          type: string


